{"version":3,"sources":["Components/Nav.js","Components/SearchFields.js","Components/CountryCard.js","serviceWorker.js","index.js","Dashboard.js"],"names":["Nav","className","SearchFields","search","region","handleChange","name","placeholder","onChange","value","disabled","CountryCard","props","country","flag","population","area","subregion","capital","alt","src","toString","replace","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","useState","setSearch","setRegion","countries","setCountries","useEffect","a","axios","get","response","data","fetchAllCountries","fetchByRegion","filteredCountries","filter","toLowerCase","includes","sort","b","map","key","alpha3Code","exact","path","event","console","log","length","target","component","CountryPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.126faf15.chunk.js","sourcesContent":["import React from 'react'\nimport './Nav.scss'\n\nexport default function Nav () {\n  return (\n    <nav className='nav'>\n      <h1>WORLDPEDIA</h1>\n      {/* <span><button>Dark Mode</button></span> */}\n    </nav>\n  )\n}","import React from 'react'\nimport './SearchFields.scss';\n\nexport default function SearchFields ({search, region, handleChange}) {\n  return(\n    <div className='sticky-nav'>\n      <form >\n        <input \n          name='country' \n          placeholder='Search for a country...'\n          onChange={handleChange} />\n        <select\n          name='region'\n          value={region}\n          onChange={handleChange}\n          >\n          <option disabled>Filter by Region</option>\n          <option value=\"all\">All</option>\n          <option value=\"africa\">Africa</option>\n          <option value=\"americas\">Americas</option>\n          <option value=\"asia\">Asia</option>\n          <option value=\"europe\">Europe</option>\n          <option value=\"oceania\">Oceania</option>\n        </select>\n      </form>\n    </div>\n  )\n}","import React from 'react';\nimport './CountryCard.scss'\n\nexport default function CountryCard (props) {\n  const { flag, name, population, area, region, subregion, capital } = props.country;\n\n  function formatCommas(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n  }\n\n  return(\n    <div className='country-card'>\n      <img \n        className='country-flag'\n        alt='flag'\n        src={flag} />\n      <article className='country-article'>\n        <h3> {name} </h3>\n        <p><strong> Population:</strong> {formatCommas(population)}</p>\n        <p><strong> Area:</strong> {area}</p>\n        <p><strong> Density:</strong> {(population/area).toFixed(2)}</p>\n        <p><strong> Region:</strong> {region}</p>\n        <p><strong> Subregion:</strong> {subregion?subregion:'-'}</p>\n        <p><strong> Capital:</strong> {capital?capital:'-'}</p>\n      </article>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport Dashboard from './Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><Dashboard /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useState, useEffect} from 'react';\nimport { Switch, Route  } from 'react-router-dom';\nimport Nav from './Components/Nav';\nimport SearchFields from './Components/SearchFields';\nimport CountryCard from './Components/CountryCard';\nimport CountryPage from './Components/CountryPage';\nimport axios from 'axios';\nimport './App.scss';\n\nexport default function Dashboard() {\n  const [search, setSearch] = useState('')\n  const [region, setRegion] = useState('all')\n  const [countries, setCountries] = useState([])\n  \n  function handleChange (event) {\n    console.log(search, region, countries.length)\n    const {name, value} = event.target\n    if (name==='country'){\n      setSearch(value)\n    } else if (name==='region') {\n      setRegion(value)\n    }\n  }\n\n  useEffect (() => {\n    if (region === 'all') {\n      const fetchAllCountries = async () => {\n        const response = await axios.get('http://restcountries.eu/rest/v2/all')\n        setCountries(response.data)\n      }\n      fetchAllCountries()\n    } else {\n      const fetchByRegion = async () => {\n        const response = await axios.get(`http://restcountries.eu/rest/v2/region/${region}`)\n        setCountries(response.data)\n      }\n      fetchByRegion()\n    }\n    // eslint-disable-next-line\n  }, [countries])\n\n  const filteredCountries = countries\n    .filter(country => {\n      return country.name.toLowerCase().includes(search.toLowerCase())\n    })\n    .sort((a,b) =>b.population -a.population)\n    .map(country => \n      <span key={country.alpha3Code}>\n        <CountryCard country={country} />\n      </span>\n    )\n  \n  return (\n    <div>\n      <Nav />\n      <Switch>\n        <Route exact path='/'>\n          <SearchFields handleChange={handleChange}/>\n          {filteredCountries.length > 0 \n            ?`Showing ${filteredCountries.length} countries...`\n            : 'Loading ...'}\n          <main className='countries-container'>\n            {filteredCountries}\n          </main>\n        </Route>\n        <Route path='/:alpha3Code' component={CountryPage} />\n      </Switch>\n    </div>\n  )\n}\n\n"],"sourceRoot":""}